// Generated by CoffeeScript 1.10.0
(function() {
  var VideoListView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  VideoListView = (function(superClass) {
    extend(VideoListView, superClass);

    function VideoListView() {
      return VideoListView.__super__.constructor.apply(this, arguments);
    }

    VideoListView.prototype.events = {
      'click .delete-all-btn': 'alertDeleteVideos',
      'click .delete-all-btn.active': 'cancel',
      'click .cancel-delete': 'cancel',
      'click .sync-btn': 'syncVideos'
    };

    VideoListView.prototype.initialize = function() {
      alertView.showAlert();
      return $('.sync-btn').on('click', (function(_this) {
        return function(e) {
          return _this.syncVideos($(e.target));
        };
      })(this));
    };

    VideoListView.prototype.alertDeleteVideos = function(e) {
      this.$('.content-header-btn').not('.secondary').removeClass('active');
      $(e.currentTarget).addClass('active');
      return alertView.showAlert({
        buttons: '<a href="' + URLS.delete_videos + '" class="btn confirm-delete">Yes</a><button class="btn cancel-delete">No</button>',
        message: 'Delete all your synced videos?'
      });
    };

    VideoListView.prototype.cancel = function() {
      this.$('.delete-all-btn').removeClass('active');
      return alertView.hideAlert();
    };

    VideoListView.prototype.syncVideos = function(btn) {
      var $btn;
      $btn = $(btn);
      $btn.removeClass('active').addClass('busy').attr('disabled', 'disabled').text('Syncing');
      alertView.showAlert({
        message: '<i class="spinner icon-contrast"></i>Retrieving YouTube videos from your Facebook timeline...'
      });
      return $.get(URLS.sync_videos, (function(_this) {
        return function(response) {
          _this.$('.date.faded').text('Synced just now');
          $btn.removeClass('busy').prop('disabled', '').text('Sync Videos');
          if (response > 0) {
            _this.$('#video-list').load(window.location.pathname + " #video-list-content");
            return alertView.showAlert({
              message: response + ' new videos found and synced',
              showCloseBtn: true
            });
          } else {
            return alertView.showAlert({
              message: 'No new videos were found',
              showCloseBtn: true
            });
          }
        };
      })(this));
    };

    return VideoListView;

  })(Backbone.View);

  new VideoListView({
    el: $('.content')
  });

}).call(this);

//# sourceMappingURL=video-list-view.js.map
